[{"/Users/omar/Documents/CF-AG/meet/src/service-worker.js":"1","/Users/omar/Documents/CF-AG/meet/src/index.js":"2","/Users/omar/Documents/CF-AG/meet/src/serviceWorkerRegistration.js":"3","/Users/omar/Documents/CF-AG/meet/src/App.js":"4","/Users/omar/Documents/CF-AG/meet/src/reportWebVitals.js":"5","/Users/omar/Documents/CF-AG/meet/src/api.js":"6","/Users/omar/Documents/CF-AG/meet/src/CitySearch.js":"7","/Users/omar/Documents/CF-AG/meet/src/NumberOfEvents.js":"8","/Users/omar/Documents/CF-AG/meet/src/EventList.js":"9","/Users/omar/Documents/CF-AG/meet/src/mock-data.js":"10","/Users/omar/Documents/CF-AG/meet/src/Event.js":"11","/Users/omar/Documents/CF-AG/meet/src/Alert.js":"12"},{"size":2837,"mtime":1654515229048,"results":"13","hashOfConfig":"14"},{"size":916,"mtime":1655144785141,"results":"15","hashOfConfig":"16"},{"size":5064,"mtime":1655144785145,"results":"17","hashOfConfig":"16"},{"size":1649,"mtime":1655144785097,"results":"18","hashOfConfig":"16"},{"size":364,"mtime":1655144785144,"results":"19","hashOfConfig":"16"},{"size":3289,"mtime":1655144785111,"results":"20","hashOfConfig":"16"},{"size":1973,"mtime":1655144785103,"results":"21","hashOfConfig":"16"},{"size":1044,"mtime":1655144785106,"results":"22","hashOfConfig":"16"},{"size":387,"mtime":1655144785104,"results":"23","hashOfConfig":"16"},{"size":3414,"mtime":1655144785142,"results":"24","hashOfConfig":"16"},{"size":1320,"mtime":1655144785104,"results":"25","hashOfConfig":"16"},{"size":622,"mtime":1655144785095,"results":"26","hashOfConfig":"16"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1b31fs6",{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"npgjkw",{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/omar/Documents/CF-AG/meet/src/service-worker.js",[],[],"/Users/omar/Documents/CF-AG/meet/src/index.js",[],"/Users/omar/Documents/CF-AG/meet/src/serviceWorkerRegistration.js",[],"/Users/omar/Documents/CF-AG/meet/src/App.js",[],"/Users/omar/Documents/CF-AG/meet/src/reportWebVitals.js",[],"/Users/omar/Documents/CF-AG/meet/src/api.js",["53"],"/**\n *\n * @param {*} events:\n * The following function should be in the “api.js” file.\n * This function takes an events array, then uses map to create a new array with only locations.\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\n * The Set will remove all duplicates from the array.\n */\n\n import { mockData } from './mock-data';\n import axios from 'axios';\n import NProgress from 'nprogress';\n \n \n export const extractLocations = (events) => {\n    var extractLocations = events.map((event) => event.location);\n    var locations = [...new Set(extractLocations)];\n    return locations;\n  };\n  \n  //if access token found in storage\n  const checkToken = async (accessToken) => {\n    const result = await fetch(\n      `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\n    )\n      .then((res) => res.json())\n      .catch((error) => error.json());\n  \n    return result;\n  };\n\n  //remove the code from the URL once you’re finished with it\n  const removeQuery = () => {\n    if (window.history.pushState && window.location.pathname) {\n      var newurl =\n        window.location.protocol +\n        \"//\" +\n        window.location.host +\n        window.location.pathname;\n      window.history.pushState(\"\", \"\", newurl);\n    } else {\n      newurl = window.location.protocol + \"//\" + window.location.host;\n      window.history.pushState(\"\", \"\", newurl);\n    }\n  };\n \n  //getEvents function\n export const getEvents = async () => {\n  NProgress.start();\n\n  if (window.location.href.startsWith(\"http://localhost\")) {\n    NProgress.done();\n    return mockData;\n  }\n\n\n  const token = await getAccessToken();\n\n  if (token) {\n    removeQuery();\n    const url = 'https://2bfjtx63ai.execute-api.us-east-1.amazonaws.com/dev/api/get-events/token';\n    const result = await axios.get(url);\n    if (result.data) {\n      var locations = extractLocations(result.data.events);\n      localStorage.setItem(\"lastEvents\", JSON.stringify(result.data));\n      localStorage.setItem(\"locations\", JSON.stringify(locations));\n    }\n    NProgress.done();\n    return result.data.events;\n  }\n};\n\n//No access token found in localstorage\nexport const getAccessToken = async () => {\n  const accessToken = localStorage.getItem('access_token');\n  const tokenCheck = accessToken && (await checkToken(accessToken));\n\n  if (!accessToken || tokenCheck.error) {\n    await localStorage.removeItem(\"access_token\");\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = await searchParams.get(\"code\");\n    if (!code) {\n      const results = await axios.get(\n        \"https://2bfjtx63ai.execute-api.us-east-1.amazonaws.com/dev/api/get-auth-url\");\n      const { authUrl } = results.data;\n      return (window.location.href = authUrl);\n    }\n    return code && getToken(code);\n  }\n  return accessToken;\n}\n\n//new token\nconst getToken = async (code) => {\n      const encodeCode = encodeURIComponent(code);\n      const { access_token } = await fetch('https://2bfjtx63ai.execute-api.us-east-1.amazonaws.com/dev/api/token/encodeCode')\n  \n     .then((res) => {\n      return res.json();\n    })\n    .catch((error) => error);\n\n  access_token && localStorage.setItem(\"access_token\", access_token);\n\n  return access_token;\n};","/Users/omar/Documents/CF-AG/meet/src/CitySearch.js",[],"/Users/omar/Documents/CF-AG/meet/src/NumberOfEvents.js",[],"/Users/omar/Documents/CF-AG/meet/src/EventList.js",[],"/Users/omar/Documents/CF-AG/meet/src/mock-data.js",[],"/Users/omar/Documents/CF-AG/meet/src/Event.js",[],"/Users/omar/Documents/CF-AG/meet/src/Alert.js",[],{"ruleId":"54","severity":1,"message":"55","line":95,"column":13,"nodeType":"56","messageId":"57","endLine":95,"endColumn":23},"no-unused-vars","'encodeCode' is assigned a value but never used.","Identifier","unusedVar"]